git init        = iniciar a controlar proyecto con git

git config      = visualizar las configuraciones de actuales, o, para fijar configuraciones
  git config --global user.name "Bryan Solares"
  git config --global user.email "solares.josue@outlook.com"
  git config --global core.editor nombreeditor
  git config --list

git help <verbo> = visualiziar ayuda de cierto comando

git add          = agregar archivos del working directory al stage directory

git clone [url] = clonar repositorio

git status      = comprobar estado actual de los archivos
  git status --short
  git status -s
  ?? = archivos nuevos que no estan rastreados
  A  = archivos que estan preparados
  M  = archivos que han sido modificados

git diff       = muestra lo agregado, modificado o eliminado de los archivos que se estan trabajando
  git diff --stage = muestra los cambios ultimos hechos contra lo preparado
  git diff --cached = sinonimo de stage

git commit     = confirmar los cambios que han sido preparados
  git commit -v
  git commit -m
  git commit -a -m "Mensaje" = Prepara y al mismo tiempo confirma los cambios que se tienen
  git commit --amend = Rehacer la confirmacion que recientemente se hizo. Archivos olvidados


git rm          = eliminar archivo del directorio de trabajo, si se hace con rm se ira al unstage
  git rm -f     = forzar eliminacion de archivo
  git rm --cached nombrearchivo = Eliminar archivo, manteniendolo en directorio de trabajo pero git
                                    no lo tomara en consideracion

git log         = visualizar historial de confirmaciones
  git log -p    = muestra historial + los cambios hechos en ellos
  git log -p -2 = muestra dos ultimas entradas del historial
  git log --stat
  git log --pretty=oneline | short | full | fuller
  git log --pretty=format:"%h - %an, %ar : %s"
    %H = Hash de la confirmacion
    %h = Hash de la confirmacion abreviado
    %T = Hash del arbol
    %t = Hash del arbol abreviado
    %P = Hash de las confirmaciones padre
    %p = Hash de las confirmaciones padre abreviado
    %an = Nombre del autor
    %ae = Direccion del correo electronico
    %ad = Fecha de autoria (el formato respeta la opcion --date)
    %ar = Fecha de autoria, relativa
    %cn = Nombre del confirmador
    %ce = Direccion del correo del confirmador
    %cd = Fecha de confirmacion
    %cr = Fecha de confirmacion, relativa
    %s  = Asunto
  git log --pretty=format:"%h %s" --graph = graph agrega un grafico ascii
  git log --shortstat
  git log --name-only
  git log --name-status
  git log --abbrev-commit
  git log --relative-date
  git log --oneline

  --since = desde 
  --until = hasta

  git log --since=2.weeks = commits hechos las ultimas dos semanas
  git log --since="2 years 1 day 3 minutes ago" = commits de hace 2 anios, 1 dia, 3 minutos
  git log --since="2022-01-10"
  
  git log --author
  
  git log -Sfunction_name = busca la funcion indicada entre los commits
  

  git log:
  -(n)                = n commits que se quieren visualizar
  --since, --after    = despues de la fecha especificada
  --until, --before   = antes de la fecha especificada
  --author            = autor que coincide con la cadena indicada
  --committer         = confirmador que coincide con la cadena indicada
  -S                  = confirmaciones que aniaden o eliminan codigo de acuerdo a cadena indicada

  git log --pretty="%h - %s" --author=solares --since="2022-01-01" --before="2022-01-11" --no-merges
  -- t/

git reset HEAD <nombrearchivo> = deshacer un archivo preparado

git checkout -- <nombrearchivo> = deshacer un archivo modificado (no se puede recuperar informacion)

**** REMOTOS *****
git remote            = ver los remotos que se tienen agregardos, por defecto se nombran con origin
git remote -v          = ver los remotos + url de cada uno de ellos
git remote add [nombre] [url] = aniadir un remoto con nombre personalizado

**** TRAER Y COMBINAR REMOTOS ****
git fetch [remote-name]   = obtener datos de un remoto, solo extrae la informacion, no combina ni
                            modifica el trabajo que se lleva
git pull [remote-name]    = obtener datos de una remoto, intentara combinar los datos
git push [remote-name] [branch-name] = para enviar la informacion local a servidor
git remote show [remote-name] = muestra informacion mas detalla sobre el remoto indicado
git remote rename [remote-name-current] [remote-name-new] = Cambiar nombre de remoto
git remote rm [remote-name] = eliminar remoto no deseado

**** ETIQUETADOS ****
git tag                     = listar las etiquetas que se tienen en orden alfabetico
git tag -l 'v.1.8.5'        = listar las etiquetas que coinciden con lo indicado
git tag -a v1.0.0 -m 'msg'  = agregar nueva etiqueta anotada y un mensaje especifico
  git show v1.0.0           = visualiza los datos del commit relacionado a la etiqueta indicada
git tag v2.0.0              = etiqueta ligera, no contiene detalle mayor a solo la etiqueta
git tag -a v1.2.0 [hash]    = agregar etiqueta a un commit antiguo, etiquetas tardias
git push origin [etiqueta]  = para subir a servidor etiqueta deseada
git push origin --tags      = para subir a servidor todas la etiquetas
git checkout -b [branch-name] [label] = para crear rama a partir de la etiqueta indicada

**** ALIAS EN GIT ****
git config --global alias.[alias] [comando]


Fases de git
Untracked - Unmodified - Modified - Staged

Para ignorar archivos o carpetas se pueden indicar en un archivo .gitignore ->
https://github.com/github/gitignore



